<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AtendeCia Chat</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/style.css"> <!-- Placeholder for custom styles -->
    <style>
        /* Basic styles - will be expanded */
        body { font-family: sans-serif; margin: 0; display: flex; flex-direction: column; height: 100vh; }
        .header {
            background-color: #f8f9fa;
            padding: 10px 20px;
            border-bottom: 1px solid #dee2e6;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .header img.logo {
            height: 40px; /* Adjust as needed */
            margin-right: 10px;
        }
        .header .user-info {
            font-size: 0.9em;
        }
        #chat-container { flex-grow: 1; overflow-y: auto; padding: 20px; background-color: #e9ecef; }
        #message-form { display: flex; padding: 10px; border-top: 1px solid #dee2e6; background-color: #f8f9fa; }
        #message-input { flex-grow: 1; padding: 10px; border: 1px solid #ced4da; border-radius: 4px; margin-right: 10px; }
        #message-form button { padding: 10px 15px; }
        .message { margin-bottom: 15px; display: flex; }
        .message .content { max-width: 75%; padding: 10px 15px; border-radius: 15px; word-wrap: break-word; }
        .message.user { justify-content: flex-end; }
        .message.user .content { background-color: #0d6efd; color: white; border-bottom-right-radius: 0; }
        .message.assistant { justify-content: flex-start; }
        .message.assistant .content { background-color: #fff; color: #212529; border: 1px solid #dee2e6; border-bottom-left-radius: 0; position: relative; /* For copy button */ }
        .message .timestamp { font-size: 0.75em; color: #6c757d; margin-top: 5px; text-align: right; }
        .message.assistant .timestamp { text-align: left; }
        /* Styles for content generated by backend HTML */
        .message.assistant .content img {
             max-width: 100%; /* Ensure images don't overflow */
             height: auto;
             display: block; /* Prevent extra space below image */
             margin-bottom: 5px; /* Space below image */
        }
        .copy-button {
            position: absolute;
            top: 5px;
            right: 5px;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 0.8em;
            color: #6c757d;
            opacity: 0;
            transition: opacity 0.2s;
        }
        .message.assistant .content:hover .copy-button {
            opacity: 1;
        }

    </style>
</head>
<body>
    <div class="header">
        <div>
            <img src="<%= logo %>" alt="AtendeCia Logo" class="logo">
            <span>AtendeCia Chat</span>
        </div>
        <div class="user-info">
            <% if (userEmail) { %>
                <span><%= userEmail %></span>
                <button id="clear-chat-btn" class="btn btn-sm btn-outline-warning ms-2">Limpar Chat</button>
                <a href="/logout" class="btn btn-sm btn-outline-danger ms-2">Sair</a>
            <% } %>
        </div>
    </div>

    <div id="chat-container">
        <!-- Chat messages will be loaded here -->
        <% history.forEach(msg => { %>
            <div class="message <%= msg.sender %>">
                <div class="content">
                    <%# REMOVED: Logic to display image separately based on msg.imageUrl %>
                    <%# Image is now embedded in msg.content if msg.isHtml is true %>
                    <% if (msg.isHtml) { %>
                        <%- msg.content %> <!-- Use <%- %> for unescaped HTML -->
                    <% } else { %>
                        <%- msg.content.replace(/\n/g, '<br>') %> <!-- Basic newline handling -->
                    <% } %>
                    <% if (msg.sender === 'assistant') { %>
                        <button class="copy-button" title="Copiar texto" onclick="copyToClipboard(this)">📋</button>
                    <% } %>
                    <div class="timestamp"><%= new Date(msg.timestamp).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' }) %></div>
                </div>
            </div>
        <% }) %>
    </div>

    <form id="message-form">
        <input type="text" id="message-input" placeholder="Digite sua mensagem..." autocomplete="off">
        <button type="submit" class="btn btn-primary">Enviar</button>
    </form>

    <script>
        // Scroll to bottom on load
        const chatContainer = document.getElementById('chat-container');
        chatContainer.scrollTop = chatContainer.scrollHeight;

        // Basic form submission
        const messageForm = document.getElementById('message-form');
        const messageInput = document.getElementById('message-input');

        messageForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const messageText = messageInput.value.trim();
            if (!messageText) return;

            messageInput.value = ''; // Clear input
            addMessageToUI('user', messageText);

            try {
                const response = await fetch('/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message: messageText }),
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                // Pass null for imageUrl as it's now embedded in data.response
                addMessageToUI('assistant', data.response, data.is_html, null);

            } catch (error) {
                console.error('Error sending message:', error);
                addMessageToUI('assistant', `Erro ao enviar mensagem: ${error.message}`, false, null);
            }
        });

        // Modified addMessageToUI: Removed separate image handling
        function addMessageToUI(sender, content, isHtml = false, imageUrl = null) { // imageUrl is unused now
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message', sender);

            const contentDiv = document.createElement('div');
            contentDiv.classList.add('content');

            // REMOVED: Logic to create logo/image elements based on imageUrl
            // Image is now part of 'content' if 'isHtml' is true

            if (isHtml) {
                contentDiv.innerHTML = content; // Use innerHTML directly for HTML content
            } else {
                // Basic text handling, replace newlines with <br>
                contentDiv.innerHTML = content.replace(/\n/g, '<br>');
            }

            if (sender === 'assistant') {
                const copyBtn = document.createElement('button');
                copyBtn.classList.add('copy-button');
                copyBtn.title = 'Copiar texto';
                copyBtn.innerHTML = '📋';
                copyBtn.onclick = () => copyToClipboard(copyBtn);
                contentDiv.appendChild(copyBtn);
            }

            const timestampDiv = document.createElement('div');
            timestampDiv.classList.add('timestamp');
            timestampDiv.textContent = new Date().toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
            contentDiv.appendChild(timestampDiv);

            messageDiv.appendChild(contentDiv);
            chatContainer.appendChild(messageDiv);
            chatContainer.scrollTop = chatContainer.scrollHeight; // Scroll to bottom
        }

        // Clear Chat Button
        const clearChatBtn = document.getElementById('clear-chat-btn');
        if (clearChatBtn) {
            clearChatBtn.addEventListener('click', async () => {
                if (confirm('Tem certeza que deseja limpar todo o histórico desta conversa?')) {
                    try {
                        const response = await fetch('/clear_chat', { method: 'POST' });
                        if (response.ok) {
                            chatContainer.innerHTML = ''; // Clear UI
                            alert('Histórico limpo com sucesso!');
                        } else {
                            alert('Erro ao limpar o histórico.');
                        }
                    } catch (error) {
                        console.error('Error clearing chat:', error);
                        alert('Erro ao limpar o histórico.');
                    }
                }
            });
        }

        // Copy to Clipboard function (minor adjustment to handle embedded images better)
        function copyToClipboard(buttonElement) {
            const contentElement = buttonElement.parentElement;
            const clone = contentElement.cloneNode(true);
            const timestamp = clone.querySelector('.timestamp');
            const copyBtn = clone.querySelector('.copy-button');
            if (timestamp) timestamp.remove();
            if (copyBtn) copyBtn.remove();

            let textToCopy = '';
            // Iterate through child nodes to reconstruct text, handling potential HTML
            clone.childNodes.forEach(node => {
                if (node.nodeType === Node.TEXT_NODE) {
                    textToCopy += node.textContent;
                } else if (node.nodeType === Node.ELEMENT_NODE) {
                    if (node.tagName === 'BR') {
                        textToCopy += '\n';
                    } else if (node.tagName === 'IMG') {
                        // Skip images in copied text unless specifically needed
                        // if (node.alt === 'Imagem do Produto') textToCopy += `\n[Imagem: ${node.src}]\n`;
                    } else if (node.tagName === 'DIV' && node.querySelector('img[alt="Cia da Informática Logo"]')) {
                        // Skip the div containing the logos
                    } else {
                        // Get text content of other elements, attempting to preserve structure
                        textToCopy += node.innerText || node.textContent;
                    }
                }
            });

            navigator.clipboard.writeText(textToCopy.trim()).then(() => {
                buttonElement.innerText = '✅';
                setTimeout(() => { buttonElement.innerHTML = '📋'; }, 1500);
            }).catch(err => {
                console.error('Failed to copy text: ', err);
                alert('Falha ao copiar texto.');
            });
        }

    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

